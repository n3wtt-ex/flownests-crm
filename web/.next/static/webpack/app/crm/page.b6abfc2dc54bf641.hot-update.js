"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/crm/page",{

/***/ "(app-pages-browser)/./app/services/crmApi.ts":
/*!********************************!*\
  !*** ./app/services/crmApi.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getActivitiesFor: function() { return /* binding */ getActivitiesFor; },\n/* harmony export */   getContact: function() { return /* binding */ getContact; },\n/* harmony export */   getDealDetail: function() { return /* binding */ getDealDetail; },\n/* harmony export */   getDealsByPipeline: function() { return /* binding */ getDealsByPipeline; },\n/* harmony export */   getPipelineStages: function() { return /* binding */ getPipelineStages; },\n/* harmony export */   isSupabaseConfigured: function() { return /* binding */ isSupabaseConfigured; },\n/* harmony export */   updateDealStage: function() { return /* binding */ updateDealStage; }\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n// Supabase-backed CRM API helpers (SSR/RLS friendly)\n// Falls back to mock when env is missing. Types from supabase.types.ts\n\nconst SUPABASE_URL = \"https://jkrxflynplzczpkzhygs.supabase.co\";\nconst SUPABASE_ANON_KEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImprcnhmbHlucGx6Y3pwa3poeWdzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQzNDczOTksImV4cCI6MjA2OTkyMzM5OX0.QYOOVOK4cI44IsSQz1MGdSQbUKJwI4frO-YdNv8hvpU\";\nfunction getClient() {\n    if (!SUPABASE_URL || !SUPABASE_ANON_KEY) return null;\n    return (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(SUPABASE_URL, SUPABASE_ANON_KEY, {\n        auth: {\n            persistSession: false\n        }\n    });\n}\n// Mock fallback for dev without env configured\nconst mock = {\n    stages: [\n        {\n            id: \"s1\",\n            name: \"New\",\n            order_index: 10,\n            probability: 10\n        },\n        {\n            id: \"s2\",\n            name: \"Contacted\",\n            order_index: 20,\n            probability: 25\n        },\n        {\n            id: \"s3\",\n            name: \"Qualified\",\n            order_index: 30,\n            probability: 45\n        }\n    ],\n    dealsByStage: {\n        s1: [\n            {\n                id: \"d1\",\n                title: \"Acme - Pilot\",\n                stage_id: \"s1\",\n                amount: 2500,\n                currency: \"USD\"\n            }\n        ],\n        s2: [],\n        s3: []\n    },\n    activities: [\n        {\n            id: \"a1\",\n            type: \"system\",\n            related_type: \"deal\",\n            related_id: \"d1\",\n            content: \"Seed: deal created\",\n            meta_json: null,\n            created_by: null,\n            created_at: new Date().toISOString()\n        }\n    ],\n    contact: {\n        id: \"c1\",\n        email: \"john@acme.com\",\n        full_name: \"John Doe\",\n        title: \"VP Sales\",\n        linkedin_url: \"https://linkedin.com/in/johndoe\",\n        website: \"https://acme.com\",\n        phone: null,\n        company_id: null,\n        owner_id: null,\n        lifecycle_stage: \"lead\",\n        reply_status: null,\n        reply_summary: null,\n        generated_body_step1: null,\n        generated_body_step2: null,\n        generated_body_step3: null,\n        latest_email_sent_at: null,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    }\n};\nasync function getPipelineStages(pipelineId) {\n    const supabase = getClient();\n    if (!supabase) return mock.stages;\n    // default pipeline resolve\n    const pipeline = pipelineId ? {\n        id: pipelineId\n    } : await (async ()=>{\n        const { data, error } = await supabase.from(\"pipelines\").select(\"id\").eq(\"is_default\", true).order(\"created_at\", {\n            ascending: true\n        }).limit(1).maybeSingle();\n        if (error) throw error;\n        return data;\n    })();\n    if (!(pipeline === null || pipeline === void 0 ? void 0 : pipeline.id)) return [];\n    const { data, error } = await supabase.from(\"pipeline_stages\").select(\"id,name,order_index,probability\").eq(\"pipeline_id\", pipeline.id).order(\"order_index\", {\n        ascending: true\n    });\n    if (error) throw error;\n    return data !== null && data !== void 0 ? data : [];\n}\nasync function getDealsByPipeline(pipelineId) {\n    const supabase = getClient();\n    if (!supabase) return mock.dealsByStage;\n    // resolve pipeline id\n    let pid = pipelineId;\n    if (!pid) {\n        const { data, error } = await supabase.from(\"pipelines\").select(\"id\").eq(\"is_default\", true).order(\"created_at\", {\n            ascending: true\n        }).limit(1).maybeSingle();\n        if (error) throw error;\n        pid = data === null || data === void 0 ? void 0 : data.id;\n    }\n    if (!pid) return {};\n    // fetch deals + join names\n    const { data: deals, error } = await supabase.from(\"deals\").select(\"id,title,amount,currency,stage_id,company_id,contact_id\").eq(\"pipeline_id\", pid);\n    if (error) throw error;\n    // fetch related names in one go\n    const companyIds = Array.from(new Set((deals !== null && deals !== void 0 ? deals : []).map((d)=>d.company_id).filter(Boolean)));\n    const contactIds = Array.from(new Set((deals !== null && deals !== void 0 ? deals : []).map((d)=>d.contact_id).filter(Boolean)));\n    const [companiesRes, contactsRes] = await Promise.all([\n        companyIds.length ? supabase.from(\"companies\").select(\"id,name\").in(\"id\", companyIds) : Promise.resolve({\n            data: [],\n            error: null\n        }),\n        contactIds.length ? supabase.from(\"contacts\").select(\"id,full_name\").in(\"id\", contactIds) : Promise.resolve({\n            data: [],\n            error: null\n        })\n    ]);\n    if (companiesRes.error) throw companiesRes.error;\n    if (contactsRes.error) throw contactsRes.error;\n    var _companiesRes_data;\n    const companyMap = new Map(((_companiesRes_data = companiesRes.data) !== null && _companiesRes_data !== void 0 ? _companiesRes_data : []).map((c)=>[\n            c.id,\n            c.name\n        ]));\n    var _contactsRes_data;\n    const contactMap = new Map(((_contactsRes_data = contactsRes.data) !== null && _contactsRes_data !== void 0 ? _contactsRes_data : []).map((c)=>[\n            c.id,\n            c.full_name\n        ]));\n    const grouped = {};\n    for (const d of deals !== null && deals !== void 0 ? deals : []){\n        var _d_amount, _d_currency, _companyMap_get, _contactMap_get;\n        const card = {\n            id: d.id,\n            title: d.title,\n            amount: (_d_amount = d.amount) !== null && _d_amount !== void 0 ? _d_amount : null,\n            currency: (_d_currency = d.currency) !== null && _d_currency !== void 0 ? _d_currency : null,\n            stage_id: d.stage_id,\n            company: d.company_id ? (_companyMap_get = companyMap.get(d.company_id)) !== null && _companyMap_get !== void 0 ? _companyMap_get : null : null,\n            contact: d.contact_id ? (_contactMap_get = contactMap.get(d.contact_id)) !== null && _contactMap_get !== void 0 ? _contactMap_get : null : null\n        };\n        if (!grouped[d.stage_id]) grouped[d.stage_id] = [];\n        grouped[d.stage_id].push(card);\n    }\n    return grouped;\n}\nasync function getDealDetail(id) {\n    const supabase = getClient();\n    if (!supabase) {\n        const anyDeal = Object.values(mock.dealsByStage).flat()[0];\n        if (!anyDeal) return null;\n        var _anyDeal_amount, _anyDeal_currency;\n        // minimal mock cast\n        return {\n            id: anyDeal.id,\n            title: anyDeal.title,\n            amount: (_anyDeal_amount = anyDeal.amount) !== null && _anyDeal_amount !== void 0 ? _anyDeal_amount : null,\n            currency: (_anyDeal_currency = anyDeal.currency) !== null && _anyDeal_currency !== void 0 ? _anyDeal_currency : null,\n            company_id: null,\n            contact_id: null,\n            pipeline_id: \"default\",\n            stage_id: anyDeal.stage_id,\n            status: \"open\",\n            source: \"inbound\",\n            notes: \"Mock\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            close_date: null\n        };\n    }\n    const { data, error } = await supabase.from(\"deals\").select(\"*\").eq(\"id\", id).maybeSingle();\n    if (error) throw error;\n    return data;\n}\nasync function getActivitiesFor(relatedType, relatedId) {\n    const supabase = getClient();\n    if (!supabase) return mock.activities;\n    const { data, error } = await supabase.from(\"activities\").select(\"*\").eq(\"related_type\", relatedType).eq(\"related_id\", relatedId).order(\"created_at\", {\n        ascending: false\n    });\n    if (error) throw error;\n    return data !== null && data !== void 0 ? data : [];\n}\nasync function getContact(id) {\n    const supabase = getClient();\n    if (!supabase) return mock.contact;\n    const { data, error } = await supabase.from(\"contacts\").select(\"*\").eq(\"id\", id).maybeSingle();\n    if (error) throw error;\n    return data;\n}\n// Actions (write) — protected by RLS; expect JWT in frontend context.\n// For SSR/Edge secure writes, prefer server-only key or edge function proxy.\nasync function updateDealStage(dealId, nextStageId) {\n    const supabase = getClient();\n    if (!supabase) return {\n        ok: true\n    };\n    const { error } = await supabase.from(\"deals\").update({\n        stage_id: nextStageId\n    }).eq(\"id\", dealId);\n    if (error) return {\n        ok: false,\n        error: error.message\n    };\n    return {\n        ok: true\n    };\n}\n// Helper to detect env presence\nfunction isSupabaseConfigured() {\n    return Boolean(SUPABASE_URL && SUPABASE_ANON_KEY);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/services/crmApi.ts\n"));

/***/ })

});