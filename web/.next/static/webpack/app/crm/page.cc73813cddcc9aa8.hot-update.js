"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/crm/page",{

/***/ "(app-pages-browser)/./app/services/crmApi.ts":
/*!********************************!*\
  !*** ./app/services/crmApi.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getActivitiesFor: function() { return /* binding */ getActivitiesFor; },\n/* harmony export */   getCalendarLink: function() { return /* binding */ getCalendarLink; },\n/* harmony export */   getContact: function() { return /* binding */ getContact; },\n/* harmony export */   getContactForDeal: function() { return /* binding */ getContactForDeal; },\n/* harmony export */   getDealDetail: function() { return /* binding */ getDealDetail; },\n/* harmony export */   getDealsByPipeline: function() { return /* binding */ getDealsByPipeline; },\n/* harmony export */   getLast7DaysReplyCount: function() { return /* binding */ getLast7DaysReplyCount; },\n/* harmony export */   getOpenDealsCount: function() { return /* binding */ getOpenDealsCount; },\n/* harmony export */   getPipelineConversion: function() { return /* binding */ getPipelineConversion; },\n/* harmony export */   getPipelineStages: function() { return /* binding */ getPipelineStages; },\n/* harmony export */   getRepliesLast7d: function() { return /* binding */ getRepliesLast7d; },\n/* harmony export */   getSimpleConversion: function() { return /* binding */ getSimpleConversion; },\n/* harmony export */   getStageDistribution: function() { return /* binding */ getStageDistribution; },\n/* harmony export */   getStageName: function() { return /* binding */ getStageName; },\n/* harmony export */   updateContactStatus: function() { return /* binding */ updateContactStatus; },\n/* harmony export */   updateDeal: function() { return /* binding */ updateDeal; },\n/* harmony export */   updateDealStage: function() { return /* binding */ updateDealStage; }\n/* harmony export */ });\n/**\r\n * Read-only CRM API helpers (MVP skeleton).\r\n * Implementation note:\r\n * - Start with mock/placeholder implementations.\r\n * - Replace with Supabase client or backend proxy once auth/RLS strategy is set.\r\n */ const MOCK_DELAY = 150;\nfunction sleep() {\n    let ms = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : MOCK_DELAY;\n    return new Promise((res)=>setTimeout(res, ms));\n}\n// In-memory mock\nconst mockStages = [\n    {\n        id: \"s_new\",\n        name: \"New\",\n        order_index: 0,\n        probability: 0.05,\n        pipeline_id: \"p_default\"\n    },\n    {\n        id: \"s_contacted\",\n        name: \"Contacted\",\n        order_index: 1,\n        probability: 0.15,\n        pipeline_id: \"p_default\"\n    },\n    {\n        id: \"s_qualified\",\n        name: \"Qualified\",\n        order_index: 2,\n        probability: 0.35,\n        pipeline_id: \"p_default\"\n    },\n    {\n        id: \"s_meeting\",\n        name: \"Meeting Scheduled\",\n        order_index: 3,\n        probability: 0.5,\n        pipeline_id: \"p_default\"\n    },\n    {\n        id: \"s_proposal\",\n        name: \"Proposal Sent\",\n        order_index: 4,\n        probability: 0.7,\n        pipeline_id: \"p_default\"\n    },\n    {\n        id: \"s_won\",\n        name: \"Won\",\n        order_index: 5,\n        probability: 1.0,\n        pipeline_id: \"p_default\"\n    },\n    {\n        id: \"s_lost\",\n        name: \"Lost\",\n        order_index: 6,\n        probability: 0,\n        pipeline_id: \"p_default\"\n    }\n];\nconst mockDeals = [\n    {\n        id: \"d1\",\n        title: \"Acme - Pilot\",\n        pipeline_id: \"p_default\",\n        stage_id: \"s_new\",\n        amount: 2500,\n        currency: \"USD\",\n        source: \"outbound\"\n    },\n    {\n        id: \"d2\",\n        title: \"Globex - Discovery\",\n        pipeline_id: \"p_default\",\n        stage_id: \"s_contacted\",\n        amount: 5000,\n        currency: \"USD\",\n        source: \"reply\"\n    },\n    {\n        id: \"d3\",\n        title: \"Initech - Expansion\",\n        pipeline_id: \"p_default\",\n        stage_id: \"s_meeting\",\n        amount: 12000,\n        currency: \"USD\",\n        source: \"booking\"\n    }\n];\nconst mockContacts = {\n    c1: {\n        id: \"c1\",\n        full_name: \"John Doe\",\n        email: \"john@acme.com\",\n        title: \"VP Sales\",\n        linkedin_url: \"https://linkedin.com/in/john\",\n        website: \"https://acme.com\"\n    },\n    c2: {\n        id: \"c2\",\n        full_name: \"Mike Neo\",\n        email: \"mike@globex.com\",\n        title: \"Head of Ops\",\n        linkedin_url: \"https://linkedin.com/in/mike\",\n        website: \"https://globex.example\",\n        reply_status: \"question\",\n        reply_summary: \"Asked about pricing\"\n    }\n};\nconst mockActivities = [\n    {\n        id: \"a1\",\n        type: \"email_in\",\n        related_type: \"deal\",\n        related_id: \"d2\",\n        content: \"pricing details?\",\n        created_at: new Date(Date.now() - 86400000).toISOString()\n    },\n    {\n        id: \"a2\",\n        type: \"meeting\",\n        related_type: \"deal\",\n        related_id: \"d3\",\n        content: \"Discovery Call scheduled\",\n        created_at: new Date(Date.now() - 3600000).toISOString()\n    },\n    {\n        id: \"a3\",\n        type: \"system\",\n        related_type: \"deal\",\n        related_id: \"d1\",\n        content: \"Deal created\",\n        created_at: new Date(Date.now() - 1800000).toISOString()\n    }\n];\n// Map one contact to deals for demo\nconst dealToContact = {\n    d1: \"c1\",\n    d2: \"c2\",\n    d3: \"c2\"\n};\nasync function getPipelineStages(pipelineId) {\n    // TODO: Replace with Supabase select from pipeline_stages where pipeline_id = pipelineId order by order_index\n    await sleep();\n    return mockStages.filter((s)=>s.pipeline_id === pipelineId).sort((a, b)=>a.order_index - b.order_index);\n}\nasync function getDealsByPipeline(pipelineId) {\n    // TODO: Replace with Supabase select from deals where pipeline_id = pipelineId\n    await sleep();\n    return mockDeals.filter((d)=>d.pipeline_id === pipelineId);\n}\nasync function getDealDetail(id) {\n    // TODO: Replace with Supabase select deals by id\n    await sleep();\n    const deal = mockDeals.find((d)=>d.id === id);\n    if (!deal) throw new Error(\"Deal not found\");\n    return deal;\n}\nasync function getActivitiesFor(relatedType, relatedId) {\n    // TODO: Replace with Supabase select activities where related_type = relatedType and related_id = relatedId order by created_at desc\n    await sleep();\n    return mockActivities.filter((a)=>a.related_type === relatedType && a.related_id === relatedId).sort((a, b)=>+new Date(b.created_at) - +new Date(a.created_at));\n}\nasync function getContact(id) {\n    // TODO: Replace with Supabase select contacts by id\n    await sleep();\n    const c = mockContacts[id];\n    if (!c) throw new Error(\"Contact not found\");\n    return c;\n}\n/**\r\n * Sprint 2 — ContactQuick actions: interested / not_interested toggle\r\n * Gerçek entegrasyonda POST /crm/actions/contacts çağrısına dönüşecektir.\r\n */ async function updateContactStatus(contactId, status) {\n    await sleep();\n    const c = mockContacts[contactId];\n    if (!c) return {\n        ok: false,\n        error: \"Contact not found\"\n    };\n    const prev = {\n        ...c\n    };\n    c.reply_status = status;\n    // Log activity\n    mockActivities.push({\n        id: \"a_\".concat(Date.now()),\n        type: \"system\",\n        related_type: \"contact\",\n        related_id: contactId,\n        content: \"Contact status changed\",\n        meta_json: {\n            from: prev.reply_status,\n            to: status\n        },\n        created_at: new Date().toISOString()\n    });\n    // Outbound webhook (log-only, mock)\n    // In real impl: fire-and-forget POST with event_type=contact_status_changed\n    return {\n        ok: true,\n        contact: c\n    };\n}\n/**\r\n * Sprint 2 — ContactQuick actions: send calendar link (placeholder)\r\n * S2: yalnızca link üretip döndürür; S3: gerçek e-posta/mesaj otomasyonu.\r\n */ async function getCalendarLink(contactId) {\n    var _mockContacts_contactId;\n    await sleep();\n    const base = \"https://cal.com/your-team/30min\";\n    // basitçe kişi e-postasını query olarak iliştir\n    const email = ((_mockContacts_contactId = mockContacts[contactId]) === null || _mockContacts_contactId === void 0 ? void 0 : _mockContacts_contactId.email) || \"prospect@example.com\";\n    const url = \"\".concat(base, \"?email=\").concat(encodeURIComponent(email));\n    return {\n        ok: true,\n        url\n    };\n}\n// Helper to compute stage name for a given stage_id (useful for UI)\nasync function getStageName(pipelineId, stageId) {\n    var _stages_find;\n    const stages = await getPipelineStages(pipelineId);\n    return (_stages_find = stages.find((s)=>s.id === stageId)) === null || _stages_find === void 0 ? void 0 : _stages_find.name;\n}\n// Demo-only helpers to bridge mock relations\nasync function getContactForDeal(dealId) {\n    const contactId = dealToContact[dealId];\n    if (!contactId) return undefined;\n    return getContact(contactId);\n}\n/**\r\n * Reporting helpers (Snapshot MVP)\r\n * Note: Mock implementation using in-memory data; replace with Supabase/Edge queries later.\r\n */ async function getRepliesLast7d() {\n    await sleep();\n    const since = Date.now() - 7 * 24 * 60 * 60 * 1000;\n    return mockActivities.filter((a)=>a.type === \"email_in\" && +new Date(a.created_at) >= since).length;\n}\nasync function getStageDistribution(pipelineId) {\n    await sleep();\n    const dist = {};\n    for (const d of mockDeals){\n        if (d.pipeline_id !== pipelineId) continue;\n        dist[d.stage_id] = (dist[d.stage_id] || 0) + 1;\n    }\n    return dist;\n}\nasync function getSimpleConversion(pipelineId) {\n    await sleep();\n    // Basit bir oran: New -> Qualified\n    const from = \"s_new\";\n    const to = \"s_qualified\";\n    const inFrom = mockDeals.filter((d)=>d.pipeline_id === pipelineId && d.stage_id === from).length;\n    const inTo = mockDeals.filter((d)=>d.pipeline_id === pipelineId && d.stage_id === to).length;\n    const rate = inFrom > 0 ? Number((inTo / inFrom * 100).toFixed(0)) : null;\n    return {\n        from,\n        to,\n        rate\n    };\n}\nasync function updateDeal(input, options) {\n    await sleep();\n    if (options === null || options === void 0 ? void 0 : options.simulateError) return {\n        ok: false,\n        error: \"Simulated update error\"\n    };\n    const idx = mockDeals.findIndex((d)=>d.id === input.id);\n    if (idx === -1) return {\n        ok: false,\n        error: \"Deal not found\"\n    };\n    const prev = mockDeals[idx];\n    // basic validation\n    if (typeof input.amount !== \"undefined\" && Number.isNaN(Number(input.amount))) {\n        return {\n            ok: false,\n            error: \"Amount must be numeric\"\n        };\n    }\n    if (typeof input.close_date !== \"undefined\") {\n        const t = Date.parse(input.close_date);\n        if (Number.isNaN(t)) return {\n            ok: false,\n            error: \"close_date must be ISO string\"\n        };\n    }\n    var _input_title, _input_currency, _input_close_date, _input_stage_id;\n    const next = {\n        ...prev,\n        title: (_input_title = input.title) !== null && _input_title !== void 0 ? _input_title : prev.title,\n        amount: typeof input.amount !== \"undefined\" ? Number(input.amount) : prev.amount,\n        currency: (_input_currency = input.currency) !== null && _input_currency !== void 0 ? _input_currency : prev.currency,\n        close_date: (_input_close_date = input.close_date) !== null && _input_close_date !== void 0 ? _input_close_date : prev.close_date,\n        stage_id: (_input_stage_id = input.stage_id) !== null && _input_stage_id !== void 0 ? _input_stage_id : prev.stage_id\n    };\n    mockDeals[idx] = next;\n    // log activity\n    const changed = {};\n    for (const k of [\n        \"title\",\n        \"amount\",\n        \"currency\",\n        \"close_date\",\n        \"stage_id\"\n    ]){\n        if (prev[k] !== next[k]) changed[k] = {\n            from: prev[k],\n            to: next[k]\n        };\n    }\n    mockActivities.push({\n        id: \"a_\".concat(Date.now()),\n        type: \"system\",\n        related_type: \"deal\",\n        related_id: input.id,\n        content: \"Deal updated\",\n        meta_json: {\n            changed\n        },\n        created_at: new Date().toISOString()\n    });\n    return {\n        ok: true,\n        deal: next\n    };\n}\n/**\r\n * Sprint 2 - İlk Görev: Kanban Drag & Drop → Stage Change\r\n * Mock ortamda optimistic UI akışını doğrulamak için stage güncelleme helper'ı.\r\n * Gerçek entegrasyonda bu fonksiyon, Edge Function'a (POST /crm/actions/deals/:id/stage) çağrı yapacak.\r\n */ async function updateDealStage(dealId, nextStageId, options) {\n    await sleep();\n    if (options === null || options === void 0 ? void 0 : options.simulateError) {\n        return {\n            ok: false,\n            error: \"Simulated network/server error\"\n        };\n    }\n    const idx = mockDeals.findIndex((d)=>d.id === dealId);\n    if (idx === -1) {\n        return {\n            ok: false,\n            error: \"Deal not found\"\n        };\n    }\n    const prev = mockDeals[idx];\n    const next = {\n        ...prev,\n        stage_id: nextStageId\n    };\n    mockDeals[idx] = next;\n    // System activity insert (mock)\n    mockActivities.push({\n        id: \"a_\".concat(Date.now()),\n        type: \"system\",\n        related_type: \"deal\",\n        related_id: dealId,\n        content: \"Stage changed\",\n        meta_json: {\n            from: prev.stage_id,\n            to: nextStageId,\n            occurred_at: options === null || options === void 0 ? void 0 : options.occurredAtISO\n        },\n        created_at: new Date().toISOString()\n    });\n    // Outbound webhook (log-only, mock)\n    // In real impl: fire-and-forget POST to outbound endpoint with event_type=deal_stage_changed\n    return {\n        ok: true,\n        deal: next\n    };\n}\n/**\r\n * Reporting (MVP, mock)\r\n * - open deals count\r\n * - last 7 days reply count (email_in)\r\n * - simple pipeline conversion (stage-to-stage ratios within current mock snapshot)\r\n */ async function getOpenDealsCount(pipelineId) {\n    await sleep();\n    const list = pipelineId ? mockDeals.filter((d)=>d.pipeline_id === pipelineId) : mockDeals;\n    // Open = not Won and not Lost\n    return list.filter((d)=>d.stage_id !== \"s_won\" && d.stage_id !== \"s_lost\").length;\n}\nasync function getLast7DaysReplyCount() {\n    await sleep();\n    const now = Date.now();\n    const sevenDays = 7 * 24 * 60 * 60 * 1000;\n    return mockActivities.filter((a)=>a.type === \"email_in\" && now - +new Date(a.created_at) <= sevenDays).length;\n}\nasync function getPipelineConversion() {\n    let pipelineId = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"p_default\";\n    await sleep();\n    const stages = mockStages.filter((s)=>s.pipeline_id === pipelineId).sort((a, b)=>a.order_index - b.order_index);\n    const byStageCount = {};\n    for (const s of stages)byStageCount[s.id] = 0;\n    for (const d of mockDeals){\n        if (d.pipeline_id !== pipelineId) continue;\n        if (byStageCount[d.stage_id] !== undefined) byStageCount[d.stage_id] += 1;\n    }\n    const result = stages.map((s, idx)=>{\n        const count = byStageCount[s.id] || 0;\n        let conversion = undefined;\n        if (idx < stages.length - 1) {\n            const nextStage = stages[idx + 1];\n            const nextCount = byStageCount[nextStage.id] || 0;\n            // naive ratio using snapshot counts (not cohort-based)\n            conversion = count > 0 ? Math.round(nextCount / count * 100) : undefined;\n        }\n        return {\n            stage_id: s.id,\n            stage_name: s.name,\n            count,\n            conversion_to_next: conversion\n        };\n    });\n    return result;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/services/crmApi.ts\n"));

/***/ })

});